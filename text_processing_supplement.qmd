---
title: "Text Processing Supplement"
format: html
editor: visual
---

```{r}
# knitr::opts_chunk$set(cache = TRUE, warning = FALSE, 
#                       message = FALSE, cache.lazy = FALSE)
```

# Introduction

The following supplement provides the script for processing the texts and the calculations for the article: "Faulkner and the Politics of the Long Sentence." Due to copyright restrictions, the raw text data and the flattened *Digital Yoknapatawpha* database are not available in this github repository. The results of the processing are available in the folder `processed_data`.

# Part 1: Pre-processing

Textual pre-processing implements some common procedures for cleaning up the text including removing abbreviations, standardizing quote marks, and, in general, removing artifacts that skew calculations.

### Import libraries

```{r libraries}
library(tidyverse)
library(tidytext)
library(stringi)
library(qdapRegex )
```

```{r rmdformats, include=FALSE}
library(rmdformats)
```

### Import texts

*Note*: Due to copyright the full text of all texts have been left out of the repository. The texts used were OCR scans and other digital versions. On occasion, scan artifacts and other textual corruptions required editing to match the sentences in the Digital Yoknapatawpha database. This had no effect on the actual word count-per-event.

```{r import_refined_text_files}
#| eval: false
#| include: false
# List all files with .txt extension in the "refined_text_data" directory
all_works_refined <- list.files(file.path("refined_text_data"),
                                full.names = TRUE,
                                pattern = "*.txt") %>%
  # Set full.names to TRUE to get the complete file paths, preventing "permission denied" errors
  map_df(
    ~ tibble(
      # Use the map function to perform the same command on all parts of the data set (i.e., .txt files)
      text = read_file(.),
      # Read the content of the files
      date = ifelse(
        # Check if the filename contains a four-digit year (yyyy) and extract it; otherwise, set to NA
        str_detect(basename(.), "[:digit:]{4}") == TRUE,
        str_extract(basename(.), "[:digit:]{4}"),
        NA
      ),
      title = str_extract(basename(.), "(?<=_)[:alpha:]*"),
      # Extract titles from filenames
      code = str_extract(basename(.), "[:upper:]+"),
      # Extract uppercase codes from filenames
      revised = str_detect(basename(.), "_revised") # Check if the filename contains "_revised"
    )
  )

```

### Filter texts

For this analysis several texts were excluded: *Requiem for a Nun*, the appendix to *Sound and the Fury*, *The Reivers*. The first two are not technically novels or short stories and the formatting distorts sentence length. There is no digital version of the *The Reivers* that matches the latest version used for the database. As such, the text events cannot properly reconstructed without severely adulterating the text.

```{r filter_texts}
#| eval: false
#| include: false
all_works_refined_filtered <- all_works_refined %>%
  filter(code != "R") %>%
  filter(code != "RQ")
```

## Tidy Texts

There are various features of the text files that cause issues with determining sentence length. They are abbreviations, titles with a period such as Mr. and Mrs., and ellipses. These have all been edited, so that the sentences in each text can be properly delimited.

```{r tidy_texts}
#| eval: false
#| include: false

all_works_tidy_string <- all_works_refined %>%
  group_by(title, date, code) %>%
  mutate(text = rm_abbreviation(text, replacement = "abbreviationremoved ")) %>%
  mutate(text = str_replace_all(text, "Mr\\.", "Mr ")) %>%
  mutate(text = str_replace_all(text, "Mrs\\.", "Mrs ")) %>%
  mutate(text = str_replace_all (text, "\\.\\.\\.", " punctellipse ")) %>%
  mutate(text = str_replace_all (text, "\\.\\s\\.\\s\\.\\s", " punctellipse ")) %>%
  mutate(text = str_replace_all(text, "\u2026", " punctellipse ")) %>%
  mutate(text = str_squish(text)) %>%
  mutate(text = str_replace_all(text, "—", " - ")) %>%
  mutate(work_length = str_count(text, "\\S+")) %>%
  mutate(type = ifelse(work_length > 40000, "novel", "short_story")) %>%
  mutate(cleaned = str_to_lower(text)) %>%
  mutate(cleaned = str_replace_all(cleaned, "\\p{Punct}", "p"))
  
```

```{r export_tidy_string}
#| eval: false
#| include: false
write_csv(all_works_tidy_string,"temporary_text/all_works_tidy_string_refined.csv")

```

```{r}
all_works_tidy_string_import <- read_csv("temporary_text/all_works_tidy_string_refined.csv", show_col_types = FALSE)
```

## Create Database

Import the database files

```{r preprocessing}
#| eval: false
#| include: false

characters <- read_csv("dy_database/characters.csv", show_col_types = FALSE)
locations <- read_csv("dy_database/locations.csv", show_col_types = FALSE)
events <- read_csv("dy_database/events.csv", show_col_types = FALSE)
```

filter out relevant data columns

```{r clean_character}
#| eval: false
#| include: false

characters_clean <- characters %>%
  select(SourceTextTitle:Family, Biography, Nid:IndividualGroup) %>%
  rename(CharacterID = Nid)
```

filter out location columns

```{r clean_locations}
#| eval: false
#| include: false

locations_clean <- locations %>%
  select(SourceTextTitle:Description, `True X`:Region) %>%
  rename_with( ~ gsub(" ", "_", .x, fixed = TRUE)) %>%
  mutate(across(contains('_'),  ~ as.numeric(gsub(" ", "", .)))) %>%
  mutate(True_X = coalesce(True_X, Cemetery_X)) %>%
  mutate(True_Y = coalesce(True_Y, Cemetery_Y)) %>%
  select(!(Cemetery_X:Cemetery_Y)) %>%
  rename(LocationCode = LocationKey)
```

filter out events columns

```{r events_clean}
#| eval: false
#| include: false

events_clean <- events %>%
  select(!c(Body:y, Keywords)) %>%
  pivot_longer(
    c(CharactersPresent, CharactersMentioned),
    names_to = "PresentMentioned",
    values_to = "CharacterID"
  ) %>%
  separate_rows(CharacterID, sep = ",") %>%
  mutate(CharacterID = as.numeric(str_trim(CharacterID))) %>%
  mutate(PresentMentioned = str_remove_all(PresentMentioned, "Characters")) %>%
  drop_na(CharacterID)

```

```{r full_database}
#| eval: false
#| include: false

database_full <- events_clean %>% 
                 left_join(characters_clean) %>% 
                 left_join(locations_clean)  

```

```{r}
#| eval: false
#| include: false

write_csv(database_full, "processed_data/dy_database_flattened_2024_1_21.csv")

```

The event data has been grabbed from the latest database extraction. As the delimiting of event data has been stable for some time, there is no need to update this. The only thing that changes from year to year is the number of keywords entered by event.

```{r import_event_data}
# Import dy_event_data and change column names to eliminate capital letters and spaces.

dy_events_data <- read_csv("processed_data/dy_database_flattened_2024_1_21.csv", show_col_types = FALSE) %>% 
                  rename_with( ~ tolower(str_replace_all(.x,"\\s+|\\p{Punct}", "_"))) %>% 
  filter(sourcetextcode != "R") %>%
  filter(sourcetextcode != "RQ")
                  
```

## Create Begin and End Columns

The event data needs to be modified to create a begin and end column. As this data is from the database, the text needs to be changed to matches the changes already implemented in the texts otherwise it will not be able to find the index. Thi means replacing titles, abbreviations, and ellipses. Two helper columns `begin_word_cleaned` and `end_word_cleaned` are also created. These columns are in lower case and all punctuation is converted to the letter p as a place holder. This has to do with the unicode character for punctuation marks not necessarily matching. As we only need the index to extract the sentence, it does not matter what this random letter is.

```{r dy_events_data_short}
#Clean up the event data and build begin and end word vectors

#| eval: false
#| include: false

dy_events_data_short <- dy_events_data %>%
  select(sourcetexttitle,
         sourcetextcode,
         first_8_10_words_of_event,
         nid,
         orderwithinpage) %>%
  rename(begin_word = first_8_10_words_of_event)  %>%
  relocate(begin_word, .after = last_col()) %>%
  mutate(begin_word = rm_abbreviation(begin_word, replacement = "abbreviationremoved ")) %>%
  mutate(begin_word = str_replace_all(begin_word, "Mr\\.", "Mr ")) %>%
  mutate(begin_word = str_replace_all(begin_word, "Mrs\\.", "Mrs ")) %>%
  mutate(begin_word = str_replace_all (begin_word, "\\.\\.\\.", " punctellipse ")) %>%
  mutate(begin_word = str_replace_all (begin_word, "\\.\\s\\.\\s\\.\\s", " punctellipse ")) %>%
  mutate(begin_word = str_replace_all(begin_word, "\u2026", " punctellipse ")) %>%
  mutate(begin_word = str_replace_all(begin_word, "—", " - ")) %>%
  rename(code = sourcetextcode) %>%
  distinct(nid, .keep_all = TRUE) %>%
  group_by(sourcetexttitle) %>%
  arrange(orderwithinpage, .by_group =
            TRUE) %>%
  mutate(end_word = ifelse(code ==
                             lead(code), lead(begin_word), ""),
         .after = begin_word) %>% 
  mutate(begin_word_cleaned = str_to_lower(str_squish(begin_word))) %>%
  mutate(end_word_cleaned = str_to_lower(str_squish(end_word))) %>%
  mutate(begin_word_cleaned = str_replace_all(begin_word_cleaned, "\\p{Punct}", "p")) %>%
  mutate(end_word_cleaned = str_replace_all(end_word_cleaned, "\\p{Punct}", "p")) %>%
  ungroup()

```

## Join Events with Texts

The cleaned up texts are joined to the event data. This sets them up to be matched.

```{r dy_texts_events}
#| eval: false
#| include: false

dy_texts_events <-  all_works_tidy_string_import %>% 
                    left_join(dy_events_data_short, by="code") 
```

## Located Indexes

The code below searches for the location of the start of the event in the full text and returns the index. Because the last event of any text is always `NA` because there is no more text, the value is set to the last index value of the full text.

```{r dy_text_event_indexed}
#| eval: false
#| include: false

dy_text_event_indexed <- dy_texts_events %>%
  mutate(begin_index = str_locate(cleaned, begin_word_cleaned)[, 1]) %>%
  mutate(end_index = str_locate(cleaned, end_word_cleaned)[, 1]) %>%
  mutate(end_index = ifelse(is.na(end_index), str_length(text), end_index)) %>% 
   select(!c(text,cleaned)) 
```

```{r dy_text_event_indexed_NA}
#This helper function checks for any sentences that cannot be matched. There should be 0 observations, meaning that everything matched.
#| eval: false
#| include: false
dy_text_event_indexed_NA <- dy_text_event_indexed %>%
  filter(is.na(begin_index)) %>%
  select(begin_word, begin_word_cleaned, orderwithinpage)


```

## Extract Event Text

The following function uses the begin and end index to retrieve the full event string from the unadulterated text.

```{r dy_text_event_sentences}
#This is not longer a necessary function since the indexes take care of this. 
# dy_text_event_sentences <- dy_text_event_indexed %>%
#   mutate(sentence = str_sub(text, begin_index, end_index -
#                           1)) 
                          
```

## Extract sentences indexes

This code sequences uses some shortcuts to arrive at the begin and end index of each sentences. First, each sentence is extracted. A sentence here is defined as any text between end-punctuation marks. It does not deal with the more complex issue of sentences that contain quotations that then themselves are quotations.

Once the sentences are established, these are unnested rowwise to create a very long table of a character per row. By setting the character index to `row_number()`, it is possible to keep track of the position of a character. Using `distinct()` grabs the first instance of each sentence, and therefore the beginning index. The end index is obviously the beginning index of the next sentence -1. With the indexes in place, the number of words in the string are counted.

```{r all_works_sentence_index}
#| eval: false
#| include: false

all_works_sentence_index <- all_works_tidy_string_import %>%
  group_by(code, date) %>%
  rowwise() %>%
  mutate(sentences = str_extract_all(text, "[^.!?]+[.!?]+\"?")) %>%
  unnest(cols = sentences) %>%
  select(!text) %>%
  select(!cleaned) %>%
  mutate(sentence_index = row_number()) %>%
  group_by(code, sentences, sentence_index) %>%
  unnest_characters(
    characters,
    sentences,
    strip_non_alphanum = FALSE,
    to_lower = FALSE,
    drop = FALSE
  ) %>%
  group_by(code) %>%
  select(!characters) %>%
  mutate(begin_sentence_index = row_number()) %>%
  distinct(sentences, .keep_all = TRUE) %>%
  mutate(end_sentence_index = lead(begin_sentence_index) - 1) %>%
  mutate(
    end_sentence_index = if_else(
      is.na(end_sentence_index),
      begin_sentence_index + str_length(sentences),
      end_sentence_index
    )
  ) %>%
  mutate(string_length = str_count(sentences, pattern = "\\s+"))
                               
```

## Reduce Event Sentences

The full text and cleaned text can be dropped from the `dy_text_event_sentences` table as they consume too much memory.

```{r dy_text_event_sentencs}
# dy_text_event_sentences_compact <- dy_text_event_sentences %>% 
#                                     select(!c(text,cleaned)) 


```

```{r}
#these are errors in the way it is fetching events. 
#| eval: false
#| include: false
check_events <- dy_text_event_indexed %>% 
                filter(begin_index>end_index)
```

## Join events and sentences

The following join and filter finds which sentences appear in which events. This is generally the preferable way to think about it, because sentences tend to be shorter than events.

```{r sentences_in_events}
#| eval: false
#| include: false
sentences_in_events <- all_works_sentence_index %>%
  inner_join(dy_text_event_indexed, by = NULL, copy = TRUE) %>%
  filter(begin_sentence_index >= begin_index, end_sentence_index <= end_index) %>% 
  select(!c(begin_word_cleaned, end_word_cleaned))
```

The opposite relationship is also true, though less frequently. Some long sentences encompassing quite a number of events. The script below accounts for this contingency.

```{r events_in_sentences}
#| eval: false
#| include: false
events_in_sentences <- all_works_sentence_index %>%
  inner_join(dy_text_event_indexed, by = NULL, copy = TRUE) %>% 
  filter(begin_index>=begin_sentence_index, end_index<=end_sentence_index) %>% 
  select(!c(begin_word_cleaned, end_word_cleaned))


```

We can then make these two figures one giant table.

```{r all_events_sentences}
#| eval: false
#| include: false
all_events_sentences <- sentences_in_events %>% 
                        bind_rows(events_in_sentences) %>% 
                        select(!c(begin_word, end_word))

```

```{r}
write_csv(all_events_sentences,"temporary_text/all_events_sentences.csv")
```

```{r}
all_events_sentences <- read_csv("temporary_text/all_events_sentences.csv")
```

## Import demographic

We can now create datatable with all of the demographic info. This table is already loaded into memory and filtered with `dy_events_data`. We can take a different part of the table to create the demographic data. Some low frequency data has been filtered out, because it did not produce relevant data. For example, there are only two `asian` characters who ever appear in the corpus.

```{r short_demographic}
short_demographic <- dy_events_data %>%
  select(
    sourcetexttitle,
    sourcetextcode,
    pagenumber,
    nid,
    presentmentioned,
    charactername,
    race,
    gender,
    class,
    rank,
    individualgroup
    ) %>%
  mutate(class = ifelse(class=="Indian Chief", "Indian Tribal Leader", class)) %>% 
  filter(race != "Asian") %>% 
  
  filter(individualgroup=="Individual") %>% 
  filter(str_detect(gender,"Group",negate= TRUE))
```

```{r}
raceclassgender_alone <- short_demographic %>%
  mutate(race_class_gender = paste(race, class, gender, sep ="_")) %>%
  mutate(race_class_gender = tolower(str_replace_all(race_class_gender, " ", "_"))) %>% 
  group_by(nid) %>% 
  add_count(nid) %>% 
  filter(n==1) %>% 
  group_by(race_class_gender) %>% 
  count() %>% 
  ungroup() %>% 
  mutate(alone_percent=n/sum(n))
  
```

```{r}
write_csv(raceclassgender_alone,"processed_data/raceclassgender_alone.csv")
```

We can generate a `race_class_gender` variable and then count if that variable occurs in a particular event. Since multiple characters appear in an event and since this also means that, for example, multiple lower class women can appear, the occurrence matrix only counts present or absent, but not total as this would lead to double counting.

```{r raceclassgender_demographic}
raceclassgender_demographic <- short_demographic %>%
  mutate(race_class_gender = paste(race, class, gender, sep ="_")) %>%
  mutate(race_class_gender = tolower(str_replace_all(race_class_gender, " ", "_"))) %>%
  group_by(sourcetextcode, presentmentioned, nid) %>%
  pivot_wider(
    id_cols = c(sourcetextcode, presentmentioned, pagenumber, nid),
    names_from = race_class_gender,
    values_from = gender,
    values_fn = list(gender = function(x) ifelse(length(x) > 0, 1, 0)),
    names_prefix = "all_"
  ) %>%
  rename_with( ~ tolower(gsub(" ", "_", .x, fixed = TRUE))) %>%
  ungroup()
```

```{r}
raceclassgender_demographic_correlation <- raceclassgender_demographic %>% 
                                            pivot_wider(names_from = presentmentioned, values_from=starts_with("all_") ) %>% 
  select(starts_with("all_")) %>% 
    mutate_all(~replace_na(., 0))
  
  matrix <- cor(raceclassgender_demographic_correlation) 

```

Join the demographics with the events and the sentences and multiply each demographic unit by string length. Simply stated, if there are no white male characters in an event this will not add to their string lenght. Alternatively, if a type of character is present that string length is added. Thus, the result is a vector of all of the strings that each type of character occurred in and how long these strings are. Each distinct sentence should be kept to prevent double counting.

```{r sentence_demographics}
sentence_demographics_raw <- all_events_sentences %>%
  left_join(raceclassgender_demographic, by = "nid") %>%
  mutate(across(starts_with("all"), ~ . * string_length)) 
  


```

```{r sentence_demographics_present}
sentence_demographics_present <- sentence_demographics_raw %>%
  filter(presentmentioned == "Present") %>%
  distinct(sentences, .keep_all = TRUE)
```

```{r sentence_demographic_present_alone}
sentence_demographics_present_alone <- sentence_demographics_present %>% pivot_longer(starts_with("all")) %>% 
  drop_na(value) %>% 
  group_by(nid) %>% 
  add_count(nid) %>% 
  filter(n==1) %>% 
  ungroup() %>% 
  group_by(code, name) %>% 
  summarise(mean_string_length = mean(value)) %>% 
  mutate(alone_group = "alone")
                                                

```
```{r}
sentence_demographics_present_group <- sentence_demographics_present %>% pivot_longer(starts_with("all")) %>% 
  drop_na(value) %>% 
  group_by(code, name) %>% 
  summarise(mean_string_length = mean(value)) %>% 
  mutate(alone_group = "group")
```
```{r}
sentence_demographic_alonegroup <- sentence_demographics_present_alone %>% bind_rows(sentence_demographics_present_group) %>% 
  group_by(code,name) %>% 
  pivot_wider(names_from = alone_group, values_from = mean_string_length) %>% 
  drop_na(alone)
```

```{r}
write_csv(sentence_demographic_alonegroup, "processed_data/sentence_demographic_alonegroup.csv")
```



```{r}
alone_group_summary <-  sentence_demographic_alonegroup %>% 
                        ungroup() %>% 
                        group_by(name) %>% 
                        summarise(mean_alone = mean(alone), mean_group = mean(group))
```


```{r sentence_demographics_mentioned}
sentence_demographics_mentioned <- sentence_demographics_raw %>%
  filter(presentmentioned == "Mentioned") %>% 
  distinct(sentences, .keep_all = TRUE)

```

```{r sentence_demographics_both}
sentence_demographics_both <- all_events_sentences %>%
  left_join(raceclassgender_demographic, by = "nid") %>%
  mutate(across(starts_with("all"), ~ . * string_length)) %>% 
  distinct(sentences, .keep_all = TRUE)
```

```{r correlation_present}

present_correlation_matrix_remove <-
  sentence_demographics_present %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>%
  select(names)

correlation_matrix_present <- sentence_demographics_present %>%
  ungroup() %>%
  select(present_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_present <-  map(names(correlation_matrix_present), ~ {
  test_result <-
    cor.test(
      sentence_demographics_present$string_length,
      correlation_matrix_present[[.x]],
      method = "pearson"
    )
  tibble(
    character_type = .x,
    cor_coefficient = round(test_result$estimate, 4),
    p_value = test_result$p.value,
  )
}) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "Present", .before = 1) %>%
  # filter(column!="string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)

```

```{r correlation_by_work_present}


correlation_work_present_remove <- sentence_demographics_present %>%
  select_if(is.numeric) %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "character_type",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(character_type) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>%
  pull(character_type)

correlation_work_present <- sentence_demographics_present %>%
  select(code, string_length, all_of(correlation_work_present_remove)) %>%
  group_by(code) %>%
  replace(is.na(.), 0) %>% 
 summarise(across(starts_with("all_"), 
                   list(cor_coefficient = ~ cor(string_length, ., use = "complete.obs"),
                        p_value = ~ cor.test(string_length, ., use = "complete.obs")$p.value),
                   .names = "{.col}_{.fn}"))

correlation_work_present_result <- correlation_work_present %>%
  pivot_longer(cols = starts_with("all_"),
               names_to = "name") %>% 
                drop_na() %>% 
               mutate(correlation_cof= ifelse(str_detect(name, "_cor"),value,NA)) %>% 
                mutate(p_value=ifelse(str_detect(name, "_p"),value,NA)) %>%                  mutate(name=str_remove_all(name,"_cor_coefficient")) %>% 
  mutate(name=str_remove_all(name,"_p_value")) %>% 
  mutate(name=str_remove_all(name, "all_")) %>% 
  mutate(p_value=ifelse(name==lead(name), lead(value),NA)) %>% 
  drop_na() %>% 
  filter(p_value<.05) %>% 
    filter(correlation_cof>.5 | correlation_cof< -.5) %>% 
  add_count(name) %>% 
  mutate(presentmentioned="Present")

 



```

```{r correlation_mentioned}
mentioned_correlation_matrix_remove <- sentence_demographics_mentioned %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>% 
  select(names)

correlation_matrix_mentioned <- sentence_demographics_mentioned %>%
  ungroup() %>%
  select(mentioned_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_mentioned <-
  map(names(correlation_matrix_mentioned), ~ {
    test_result <-
      cor.test(
        sentence_demographics_mentioned$string_length,
        correlation_matrix_mentioned[[.x]],
        method = "pearson"
      )
    tibble(
      character_type = .x,
      cor_coefficient = round(test_result$estimate, 4),
      p_value = test_result$p.value,
    )
  }) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "Mentioned", .before = 1) %>%
  filter(character_type != "string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```

```{r correlation_work_mentioned}

correlation_work_mentioned_remove <- sentence_demographics_mentioned %>%
  select_if(is.numeric) %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "character_type",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(character_type) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>%
  pull(character_type)

correlation_work_mentioned <- sentence_demographics_mentioned %>%
  select(code, string_length, all_of(correlation_work_mentioned_remove)) %>%
  group_by(code) %>%
  replace(is.na(.), 0) %>% 
 summarise(across(starts_with("all_"), 
                   list(cor_coefficient = ~ cor(string_length, ., use = "complete.obs"),
                        p_value = ~ cor.test(string_length, ., use = "complete.obs")$p.value),
                   .names = "{.col}_{.fn}"))

correlation_work_mentioned_result <- correlation_work_mentioned %>%
  pivot_longer(cols = starts_with("all_"),
               names_to = "name") %>% 
                drop_na() %>% 
               mutate(correlation_cof= ifelse(str_detect(name, "_cor"),value,NA)) %>% 
                mutate(p_value=ifelse(str_detect(name, "_p"),value,NA)) %>%                  mutate(name=str_remove_all(name,"_cor_coefficient")) %>% 
  mutate(name=str_remove_all(name,"_p_value")) %>% 
  mutate(name=str_remove_all(name, "all_")) %>% 
  mutate(p_value=ifelse(name==lead(name), lead(value),NA)) %>% 
  drop_na() %>% 
  filter(p_value<.05) %>% 
    filter(correlation_cof>.5 | correlation_cof< -.5) %>% 
  add_count(name) %>% 
  mutate(presentmentioned="Mentioned")

```

```{r}
both_correlation_matrix_remove <- sentence_demographics_both %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>% 
  select(names)

correlation_matrix_both <- sentence_demographics_both %>%
  ungroup() %>%
  select(both_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_both <-
  map(names(correlation_matrix_both), ~ {
    test_result <-
      cor.test(
        sentence_demographics_both$string_length,
        correlation_matrix_both[[.x]],
        method = "pearson"
      )
    tibble(
      character_type = .x,
      cor_coefficient = round(test_result$estimate, 4),
      p_value = test_result$p.value,
    )
  }) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "Both", .before = 1) %>%
  filter(character_type != "string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```

```{r correlation_work_both}

correlation_work_both_remove <- sentence_demographics_both %>%
  select_if(is.numeric) %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "character_type",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(character_type) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>%
  pull(character_type)

correlation_work_both <- sentence_demographics_both %>%
  select(code, string_length, all_of(correlation_work_both_remove)) %>%
  group_by(code) %>%
  replace(is.na(.), 0) %>% 
 summarise(across(starts_with("all_"), 
                   list(cor_coefficient = ~ cor(string_length, ., use = "complete.obs"),
                        p_value = ~ cor.test(string_length, ., use = "complete.obs")$p.value),
                   .names = "{.col}_{.fn}"))

correlation_work_both_result <- correlation_work_both %>%
  pivot_longer(cols = starts_with("all_"),
               names_to = "name") %>% 
                drop_na() %>% 
               mutate(correlation_cof= ifelse(str_detect(name, "_cor"),value,NA)) %>% 
                mutate(p_value=ifelse(str_detect(name, "_p"),value,NA)) %>%                  mutate(name=str_remove_all(name,"_cor_coefficient")) %>% 
  mutate(name=str_remove_all(name,"_p_value")) %>% 
  mutate(name=str_remove_all(name, "all_")) %>% 
  mutate(p_value=ifelse(name==lead(name), lead(value),NA)) %>% 
  drop_na() %>% 
  filter(p_value<.05) %>% 
    filter(correlation_cof>.5 | correlation_cof< -.5) %>% 
  add_count(name) %>% 
  mutate(presentmentioned="Both")

```

```{r all_correlation}
all_correlation <- correlation_present %>% 
                    bind_rows(correlation_mentioned) %>% 
                    bind_rows(correlation_both) %>% 
                    mutate(character_type = str_replace(character_type, "all_","")) %>% 
    arrange(desc(cor))
```

```{r all_correlation_export}

write_csv(all_correlation, "processed_data/all_correlation_charactertype.csv")

```



```{r all_work_correlation}
all_work_correlation <- correlation_work_both_result %>% 
                        bind_rows(correlation_work_mentioned_result)%>%                         bind_rows(correlation_work_present_result) 
```

```{r all_work_correlation_export}

write_csv(all_work_correlation,"processed_data/all_work_correlation.csv")

```


```{r all_work_correlation_count}
all_work_correlation_count <- all_work_correlation %>%
  
  group_by(presentmentioned) %>%
  distinct(name, n) %>%
  ungroup() %>%
  
  pivot_wider(id_cols = name,
              names_from = presentmentioned,
              values_from = n)

```

```{r all_work_correlation_export}
write_csv(all_work_correlation_count, "processed_data/all_work_correlation_count.csv")
```



Calculate the mean, median, max, and sum of each character type.

```{r average_sentence_length_type}
average_sentence_length <- sentence_demographics_both %>%
  ungroup() %>%
  filter(code != "RQ") %>%
  select(starts_with("all")) %>%
  summarise(across(
    everything(),
    list(
      mean = ~ mean(.x, na.rm = TRUE),
      median = ~ median(.x, na.rm = TRUE),
      max = ~ max(.x, na.rm = TRUE),
      sum = ~ sum(.x, na.rm = TRUE)
    )
  )) %>%
  pivot_longer(
    cols = everything(),
    names_to = c("variable", "statistic"),
    names_pattern = "(.+)_(.+)"
  ) %>%
  pivot_wider(names_from = "statistic", values_from = "value")

```

This produces quite a number of values, each character type, in fact. This is not always the most relevant. Since on occassion, a character only occurs once in a long sentence. Instead, we want characters who appear fairly frequently. The bar for this can be set to anything, but a very generous proportion of the mean being 10% of the sum was used. So these characters still appear infrequently, but have long average sentences.

```{r}
average_sentence_length_filter <- average_sentence_length %>% 
                                  mutate(percent = mean/sum) %>% 
                                  filter(percent<.01)
```

```{r}
names_demographic <- short_demographic %>%
  group_by(sourcetextcode, nid) %>%
  pivot_wider(
    id_cols = c(sourcetextcode, presentmentioned, pagenumber, nid),
    names_from = charactername,
    values_from = gender,
    values_fn = list(gender = function(x) ifelse(length(x) > 0, 1, 0)),
    names_prefix = "all_"
  ) %>% 
rename_with(~ make.unique(tolower(gsub(" ", "_", .x, fixed = TRUE))), .cols = everything()) %>% 
  ungroup()
```

```{r}
names_length_raw <- all_events_sentences %>% 
  left_join(names_demographic, by = "nid") %>%
  mutate(across(starts_with("all"), ~ . * string_length)) 
```

```{r names_length_present}
names_length_present <- names_length_raw %>%
  filter(presentmentioned == "Present") %>%
  distinct(sentences, .keep_all = TRUE)
```

```{r names_length_present_matrix}
names_present_correlation_matrix_remove <- names_length_present %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1)

correlation_matrix_names_present <- names_length_present %>%
  ungroup() %>%
  select(names_present_correlation_matrix_remove$names) %>%
  mutate_all( ~ ifelse(is.na(.), 0, .))

correlation_names_present <-  map(names(correlation_matrix_names_present), ~ {
  test_result <-
    cor.test(
      names_length_present$string_length,
     correlation_matrix_names_present[[.x]],
      method = "pearson"
    )
  tibble(
    character_name = .x,
    cor_coefficient = round(test_result$estimate, 4),
    p_value = test_result$p.value,
  )
}) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>% 
  mutate(presentmentioned="Present", .before=1) %>% 
  # filter(column!="string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```

```{r names_length_mentioned}
names_length_mentioned <- names_length_raw %>%
  filter(presentmentioned == "Mentioned") %>%
  distinct(sentences, .keep_all = TRUE)
```

```{r correlation_names_mentioned}
names_mentioned_correlation_matrix_remove <-
  names_length_mentioned %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1)

correlation_matrix_names_mentioned <- names_length_mentioned %>%
  ungroup() %>%
  select(names_mentioned_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_names_mentioned <-
  map(names(correlation_matrix_names_mentioned), ~ {
    test_result <-
      cor.test(
        names_length_mentioned$string_length,
        correlation_matrix_names_mentioned[[.x]],
        method = "pearson"
      )
    tibble(
      character_name = .x,
      cor_coefficient = round(test_result$estimate, 4),
      p_value = test_result$p.value,
    )
  }) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "Mentioned", .before = 1) %>%
  # filter(column!="string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```

```{r names_length_both}
names_length_both <- names_length_raw %>%
  distinct(sentences, .keep_all = TRUE)
```

```{r correlation_names_both}
names_both_correlation_matrix_remove <- names_length_both %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1)

correlation_matrix_names_both <- names_length_both %>%
  ungroup() %>%
  select(names_both_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_names_both <-
  map(names(correlation_matrix_names_both), ~ {
    test_result <-
      cor.test(names_length_both$string_length,
               correlation_matrix_names_both[[.x]],
               method = "pearson")
    tibble(
      character_name = .x,
      cor_coefficient = round(test_result$estimate, 4),
      p_value = test_result$p.value,
    )
  }) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "Both", .before = 1) %>%
  # filter(column!="string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```

```{r all_names_correlation}
all_names_correlation <- correlation_names_present %>%
  bind_rows(correlation_names_mentioned) %>%     
  bind_rows(correlation_names_both) %>% 
  mutate(character_name=str_replace_all(character_name, "all_","")) %>%   arrange(desc(cor))
  
```

```{r}
write_csv(all_names_correlation, "temporary_text/all_names_correlation.csv")
```



```{r}
#| eval: false
#| include: false
correlation_names_work_remove <- names_length_present %>%
  select_if(is.numeric) %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "character_type",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(character_type) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>%
  pull(character_type)

correlation_names_work_present <- names_length_present %>%
  select(code, string_length, all_of(correlation_names_work_remove)) %>%
  group_by(code) %>%
  replace(is.na(.), 0) %>% 
 summarise(across(starts_with("all_"), 
                   list(cor_coefficient = ~ cor(string_length, ., use = "complete.obs"),
                        p_value = ~ cor.test(string_length, ., use = "complete.obs")$p.value),
                   .names = "{.col}_{.fn}"))

correlation_names_work_present_result <- correlation_names_work_present %>%
  pivot_longer(cols = starts_with("all_"),
               names_to = "name") %>% 
                drop_na() %>% 
               mutate(correlation_cof= ifelse(str_detect(name, "_cor"),value,NA)) %>% 
                mutate(p_value=ifelse(str_detect(name, "_p"),value,NA)) %>%                  mutate(name=str_remove_all(name,"_cor_coefficient")) %>% 
  mutate(name=str_remove_all(name,"_p_value")) %>% 
  mutate(name=str_remove_all(name, "all_")) %>% 
  mutate(p_value=ifelse(name==lead(name), lead(value),NA)) %>% 
  drop_na() %>% 
  filter(p_value<.05) %>% 
    filter(correlation_cof>.5 | correlation_cof< -.5) %>% 
  add_count(name) %>% 
  mutate(presentmentioned="Present")
```

```{r}
write_csv(correlation_names_work_present_result, "temporary_text/correlation_names_work_present_result.csv")
```

```{r}
#| eval: false
#| include: false
correlation_names_work_mentioned_remove <- names_length_mentioned %>%
  select_if(is.numeric) %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "character_type",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(character_type) %>%
  summarise(count = n()) %>%
  filter(count > 1) %>%
  pull(character_type)

correlation_names_work_mentioned <- names_length_mentioned %>%
  select(code, string_length, all_of(correlation_names_work_mentioned_remove)) %>%
  group_by(code) %>%
  replace(is.na(.), 0) %>% 
 summarise(across(starts_with("all_"), 
                   list(cor_coefficient = ~ cor(string_length, ., use = "complete.obs"),
                        p_value = ~ cor.test(string_length, ., use = "complete.obs")$p.value),
                   .names = "{.col}_{.fn}"))

correlation_names_work_mentioned_result <- correlation_names_work_mentioned %>%
  pivot_longer(cols = starts_with("all_"),
               names_to = "name") %>% 
                drop_na() %>% 
               mutate(correlation_cof= ifelse(str_detect(name, "_cor"),value,NA)) %>% 
                mutate(p_value=ifelse(str_detect(name, "_p"),value,NA)) %>%                  mutate(name=str_remove_all(name,"_cor_coefficient")) %>% 
  mutate(name=str_remove_all(name,"_p_value")) %>% 
  mutate(name=str_remove_all(name, "all_")) %>% 
  mutate(p_value=ifelse(name==lead(name), lead(value),NA)) %>% 
  drop_na() %>% 
  filter(p_value<.05) %>% 
    filter(correlation_cof>.5 | correlation_cof< -.5) %>% 
  add_count(name) %>% 
  mutate(presentmentioned="Mentioned")
```

```{r}
write_csv(correlation_names_work_mentioned_result,"temporary_text/correlation_names_work_mentioned_result.csv")
```

```{r}
correlation_names_present_result_import <- read_csv("temporary_text/correlation_names_work_present_result.csv", show_col_types = FALSE) 
```

```{r}
correlation_names_mentioned_result_import <- read_csv("temporary_text/correlation_names_work_mentioned_result.csv", show_col_types = FALSE)
```


```{r}
#| eval: false
#| include: false
all_work_names_correlation <- correlation_names_present_result_import %>% 
                              bind_rows(correlation_names_mentioned_result_import) %>% 
 group_by(presentmentioned) %>% 
                        distinct(name,n) %>% 
                        ungroup() %>% 
                        pivot_wider(id_cols = name, names_from = presentmentioned, values_from = n) %>% 
                        filter(Mentioned>Present)

```

```{r}
write_csv(all_work_names_correlation,"temporary_text/all_work_names_correlation.csv")
```

```{r}
character_sentence_length <- names_length_both %>%
  ungroup() %>%
  filter(code != "RQ") %>%
  select(starts_with("all")) %>%
  summarise(across(
    everything(),
    list(
      mean = ~ mean(.x, na.rm = TRUE),
      median = ~ median(.x, na.rm = TRUE),
      max = ~ max(.x, na.rm = TRUE),
      sum = ~ sum(.x, na.rm = TRUE)
    )
  )) %>%
  pivot_longer(
    cols = everything(),
    names_to = c("variable", "statistic"),
    names_pattern = "(.+)_(.+)"
  ) %>%
  pivot_wider(names_from = "statistic", values_from = "value") %>%
  filter(mean != sum)

 
```

```{r}
character_sentence_length_weighted <- character_sentence_length %>%
  mutate(percent = mean / sum) %>%
  filter(percent < .01)
```

```{r}
keywords <- dy_events_data %>%
  group_by(sourcetextcode, nid, gender, pagenumber) %>%
  pivot_longer(
    cols = starts_with("kw_"),
    names_to = "keywords",
    names_prefix = "kw_",
    values_to = "second_term"
  ) %>%
  separate_rows(second_term, sep = " \\| ") %>%
  mutate(third_term = str_extract(second_term, "(?<=\\> ).*")) %>%
  mutate(second_term = str_remove(second_term, "(?<= ).*")) %>%
  mutate(second_term = str_squish(second_term)) %>%
  mutate(single_term = ifelse(!is.na(second_term), second_term, keywords)) %>%
  mutate(single_term = ifelse(!is.na(third_term), third_term, single_term)) %>%
  mutate(root_term = paste(
    keywords,
    ifelse(!is.na(second_term), paste(" : ", second_term, sep = ""), ""),
    ifelse(!is.na(third_term), paste(" :: ", third_term, sep =
                                       ""), ""),
    sep = ""
  )) %>%
  select(sourcetextcode,
         nid,
         gender,
         keywords,
         second_term,
         third_term,
         single_term) %>%
  drop_na(second_term)
 

```

```{r}
keywords_second_term <- keywords %>%
  select(sourcetextcode, nid, gender, second_term) %>%
  group_by(sourcetextcode, gender, pagenumber, nid) %>%
  pivot_wider(
    id_cols = c(sourcetextcode, nid),
    names_from = second_term,
    values_from = gender,
    values_fn = list(
      gender = function(x)
        ifelse(length(x) > 0, 1, 0)
    ),
    names_prefix = "all_"
  ) %>%
  rename_with( ~ make.unique(tolower(gsub(" ", "_", .x, fixed = TRUE))), .cols = everything()) %>%
  ungroup()
```

```{r}
count_keywords <-  keywords %>%
  count(keywords, second_term, third_term)
```

```{r}
count_keyword_works <- keywords %>% 
                ungroup() %>% 
                group_by(sourcetextcode) %>% 
                count(keywords, second_term, third_term)
```



```{r}
keywords_second_term_sentences <- all_events_sentences %>%
  left_join(keywords_second_term, by = "nid") %>%
  mutate(across(starts_with("all"), ~ . * string_length)) %>%
  distinct(sentences, .keep_all = TRUE)
```

```{r}
second_term_correlation_matrix_remove <-
  keywords_second_term_sentences %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1)

correlation_matrix_second_term <- keywords_second_term_sentences %>%
  ungroup() %>%
  select(second_term_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_second_term <-
  map(names(correlation_matrix_second_term), ~ {
    test_result <-
      cor.test(
        keywords_second_term_sentences$string_length,
        correlation_matrix_second_term[[.x]],
        method = "pearson"
      )
    tibble(
      keyword = .x,
      cor_coefficient = round(test_result$estimate, 4),
      p_value = test_result$p.value,
    )
  }) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "second_term", .before = 1) %>%
  # filter(column!="string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```

```{r}
keywords_third_term <- keywords %>%
  select(sourcetextcode, nid, gender, third_term) %>%
  group_by(sourcetextcode, gender, pagenumber, nid) %>%
  pivot_wider(
    id_cols = c(sourcetextcode, nid),
    names_from = third_term,
    values_from = gender,
    values_fn = list(
      gender = function(x)
        ifelse(length(x) > 0, 1, 0)
    ),
    names_prefix = "all_"
  ) %>%
  rename_with( ~ make.unique(tolower(gsub(" ", "_", .x, fixed = TRUE))), .cols = everything()) %>%
  ungroup()
```

```{r}
keywords_third_term_sentences <- all_events_sentences %>%
  left_join(keywords_third_term, by = "nid") %>%
  mutate(across(starts_with("all"), ~ . * string_length)) %>%
  distinct(sentences, .keep_all = TRUE)
```

```{r}
third_term_correlation_matrix_remove <-
  keywords_third_term_sentences %>%
  ungroup() %>%
  select_if(is.numeric)  %>%
  select(starts_with("all_")) %>%
  pivot_longer(starts_with("all_"),
               names_to = "names",
               values_to = "count") %>%
  drop_na(count) %>%
  group_by(names) %>%
  summarise(count = n()) %>%
  filter(count > 1)

correlation_matrix_third_term <- keywords_third_term_sentences %>%
  ungroup() %>%
  select(third_term_correlation_matrix_remove$names) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

correlation_third_term <-
  map(names(correlation_matrix_third_term), ~ {
    test_result <-
      cor.test(
        keywords_third_term_sentences$string_length,
        correlation_matrix_third_term[[.x]],
        method = "pearson"
      )
    tibble(
      keyword = .x,
      cor_coefficient = round(test_result$estimate, 4),
      p_value = test_result$p.value,
    )
  }) %>% bind_rows() %>%
  unnest_wider(cor_coefficient) %>%
  mutate(presentmentioned = "third_term", .before = 1) %>%
  # filter(column!="string_length") %>%
  filter(p_value < .5) %>%
  filter(cor > .2 | cor < -.2)
```
